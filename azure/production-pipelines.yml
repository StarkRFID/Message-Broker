# Docker
# Build and push an image to Azure Container Registry
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- none ## CHANGE THIS BACK TO 'DEV'

# Disable PR triggers. This pipeline should only execute after merging a PR
# into the DEV branch.
pr: none

resources:
- repo: self

variables:
  # Current product version
  starkVer: 2.0.2

  gitTag: 'MSGBKR-v$(starkVer).$(Build.BuildId)'
  messageBrokerProject: 'Stark.MessageBroker/Stark.MessageBroker.csproj'

  # Agent VM image name
  vmImageName: 'windows-latest'

  # The files in which to stamp the version
  versionScript: azure/content-replacer-assembly-version.ps1 
  versionFiles: "Stark.MessageBroker/Stark.MessageBroker.csproj"

name: $(TeamProject)_Production_v$(starkVer).$(Build.BuildId)

stages:
- stage: Build
  displayName: Build and push stage
  jobs:  
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)

    steps:
    - script: echo $(Build.BuildNumber)

    - checkout: self
      clean: true

    - task: PowerShell@2
      displayName: Stamp Assembly Versions
      inputs:
        filePath: $(versionScript)
        arguments: > 
          -projectFiles "$(versionFiles)"
          -version $(starkVer).$(Build.BuildId)
        failOnStderr: true

    - task: NuGetToolInstaller@1

    - task: DotNetCoreCLI@2
      displayName: dotnet restore
      inputs:
        command: restore
        projects: '$(messageBrokerProject)'
        feedsToUse: config
        nugetConfigPath: 'nuget.config'
        includeNuGetOrg: true

    - task: DotNetCoreCLI@2
      displayName: dotnet clean
      inputs:
        command: 'custom'
        projects: '$(messageBrokerProject)'
        custom: 'clean'

    - task: DotNetCoreCLI@2
      displayName: dotnet publish
      inputs:
        command: 'publish'
        publishWebProjects: false
        projects: '$(messageBrokerProject)'
        zipAfterPublish: false

    - task: DotNetCoreCLI@2
      displayName: dotnet test
      inputs:
        command: 'test'
        projects: 'Stark.MessageBroker.Tests/*.csproj'
    
    - task: CopyFiles@2
      inputs:
        SourceFolder: '$(Build.SourcesDirectory)/Stark.MessageBroker/bin/Debug/netstandard2.0/publish'
        Contents: '**'
        TargetFolder: '$(Build.ArtifactStagingDirectory)'

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'Stark.MessageBroker_Production_v$(starkVer).$(Build.BuildId)'
        publishLocation: 'Container'

  - job: Tag_Source
    displayName: Tag Source
    pool:
      vmImage: $(vmImageName)

    dependsOn: 
    - Build

    steps:
    - checkout: self
      persistCredentials: true
      clean: true
      submodules: true

    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: |
          $env:GIT_REDIRECT_STDERR` = '2>&1'
          git tag $(gitTag)
          Write-Host "Successfully created tag $(gitTag)"

          git push --tags
          Write-Host "Successfully pushed tag to repo"

        failOnStderr: false

## ADD BACK A DEPLOY STAGE/JOB FOR UPLOADING FILES TO GITHUB